{"version":3,"sources":["App.module.css","Components/Login.js","Components/About.js","Components/Contact.js","Components/MultipleURLChange.js","Components/MultipleURLChange2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","urlParams","URLSearchParams","window","location","search","delayTime","get","isMultipleRedirect","isAutoRedirectRedirect","history","useHistory","setTimeout","push","redirectToPage","id","onClick","to","console","log","delay","Math","ceil","fetch","then","catch","err","error","finally","Promise","all","map","u","About","Contact","IMAGES","Array","keys","MultipleURLChange1","useEffect","handleMultipleRequest","currentCounter","urls","i","item","key","style","src","alt","MultipleURLChange2","App","className","styles","path","MultipleURLChange","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5f8ac1ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-container\":\"App_app-container__2OIHZ\"};","import React from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst Login = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 3000;\n  const isMultipleRedirect = urlParams.get('multipleRedirect');\n  const isAutoRedirectRedirect = urlParams.get('autoRedirect');\n\n  const history = useHistory();\n\n  if (isAutoRedirectRedirect) {\n    setTimeout(() => {\n      history.push(\"/about\")\n    }, delayTime)\n  }\n\n  const redirectToPage = () => {\n    history.push(\"/about\")\n    if (isMultipleRedirect) {\n      setTimeout(() => {\n        history.push(\"/contact\")\n      }, 2000)\n    }\n  }\n\n  const handleLogin = () => {\n    setTimeout(() => {\n      redirectToPage()\n    }, delayTime)\n  }\n\n  const handleSingleRequest = () => {\n    console.log(\"Hello World\")\n    const delay = Math.ceil(delayTime / 1000);\n    fetch(`https://reqres.in/api/users?delay=${delay}`)\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        redirectToPage()\n      })\n  }\n\n  const handleMultipleRequest = () => {\n    const urls = [\n      'https://reqres.in/api/users/1',\n      'https://reqres.in/api/users/2',\n      'https://reqres.in/api/users/3'\n    ];\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        redirectToPage()\n      })\n  }\n\n  const handleMultipleURLRequest = () => {\n    const delay = Math.ceil(delayTime / 1000);\n    fetch(`https://reqres.in/api/users?delay=${delay}`)\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        history.push(\"/about\")\n        // setTimeout(() => {\n        //   history.push(\"/contact\")\n        // }, 2000)\n        setTimeout(() => {\n          history.push(\"/multiple-2\")\n        }, 2000)\n        // setTimeout(() => {\n        //   history.push(\"/multiple-2\")\n        // }, 8000)\n      })\n  }\n\n  return (\n    <section id=\"login-section\">\n      <p>SPA Login test</p>\n      <div>\n        <button id=\"login\" onClick={handleLogin}>\n          Login\n        </button>\n      </div>\n      <div>\n        <Link to=\"/about\" id=\"about-link\">About</Link>\n      </div>\n      <div>\n        <button id=\"single-request\" onClick={handleSingleRequest}>\n          Single request\n        </button>\n      </div>\n      <div>\n        <button id=\"multiple-request\" onClick={handleMultipleRequest}>\n          Multiple requests\n        </button>\n      </div>\n      <div>\n        <button id=\"multiple-url-link\" onClick={handleMultipleURLRequest}>\n          Multiple URL Changes\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from 'react'\n\nconst About = () => {\n  return (\n    <h4 id=\"about\">\n      User is LoggedIn\n    </h4>\n  );\n};\n\nexport default About;\n","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <h4 id=\"contact\">\n      Contact page\n    </h4>\n  );\n};\n\nexport default Contact;\n","import React, { useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst MAX_COUNTER = 5\nconst IMAGES = [...Array(50).keys()];\n\nconst MultipleURLChange1 = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 2000;\n\n  const history = useHistory();\n\n  const handleMultipleRequest = ((currentCounter) => {\n    const urls = []\n    for (let i = currentCounter; i <= currentCounter + 10; i ++) {\n      const delay = Math.ceil(delayTime / 1000);\n      urls.push(`https://reqres.in/api/users/${i}?delay=${delay}`)\n    }\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        if (currentCounter < MAX_COUNTER) {\n          handleMultipleRequest(currentCounter + 1)\n        }\n      })\n  })\n\n  const updateURLs = () => {\n    history.push({ search: '?color=pink' })\n    setTimeout(() => {\n      history.push(\"/multiple-2\")\n    }, 7000)\n    // setTimeout(() => {\n    //   history.push({ search: '?color=white' })\n    // }, 2000)\n  }\n\n  useEffect(() => {\n    updateURLs()\n    setTimeout(() => {\n      handleMultipleRequest(1)\n    }, 5000)\n  }, []) // eslint-disable-line\n\n  return (\n    <section id=\"login-section\">\n      <h3>\n        Multiple URL Change-1\n      </h3>\n      <div>\n        <Link to=\"/multiple-2\" id=\"multiple-2\">Multiple URL - 2</Link>\n      </div>\n      <div>\n        <p>Random Images</p>\n        {IMAGES.map((item) => item === 0 ? null : (\n          <div key={item} style={{ 'width': 200, 'height': 200 }}>\n            <img src={`https://dummyimage.com/${item*10}/09f/fff.png`} alt=\"check\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default MultipleURLChange1;\n","import React, { useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst MAX_COUNTER = 60\nconst IMAGES = [...Array(50).keys()];\n\nconst MultipleURLChange2 = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 4000;\n\n  const history = useHistory();\n\n  const handleMultipleRequest = ((currentCounter) => {\n    const urls = []\n    for (let i = 0; i <=  5; i ++) {\n      // const delay = Math.ceil(delayTime / 1000);\n      urls.push(`https://reqres.in/api/users/${i}?delay=4`)\n    }\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        if (currentCounter < MAX_COUNTER) {\n          handleMultipleRequest(currentCounter + 1)\n        }\n      })\n  })\n\n  const updateURLs = () => {\n    history.push({ search: '?color=pink' })\n    setTimeout(() => {\n      history.push({ search: '?color=green' })\n    }, 500)\n    setTimeout(() => {\n      history.push({ search: '?color=white' })\n    }, 2000)\n  }\n\n  useEffect(() => {\n    updateURLs()\n    setTimeout(() => {\n      handleMultipleRequest(1)\n    }, 5000)\n  }, []) // eslint-disable-line\n\n  return (\n    <section id=\"login-section\">\n      <h3>\n        Multiple URL Change-2\n      </h3>\n      <div>\n        <Link to=\"/multiple-1\" id=\"multiple-1\">Multiple URL - 1</Link>\n      </div>\n      <div>\n        <p>Random Images</p>\n        {IMAGES.map((item) => item === 0 ? null : (\n          <div key={item} style={{ 'width': 200, 'height': 200 }}>\n            <img src={`https://dummyimage.com/${item*10}/09f/fff.png`} alt=\"check\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default MultipleURLChange2;\n","import React from \"react\";\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Login from \"./Components/Login\";\nimport About from \"./Components/About\";\nimport styles from './App.module.css';\nimport Contact from \"./Components/Contact\";\nimport MultipleURLChange from \"./Components/MultipleURLChange\";\nimport MultipleURLChange2 from \"./Components/MultipleURLChange2\";\n\nexport default function App() {\n  console.log('TESTING - SPA using react')\n  return (\n    <Router>\n      <div className={styles['app-container']}>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/multiple-1\">\n            <MultipleURLChange />\n          </Route>\n          <Route path=\"/multiple-2\">\n            <MultipleURLChange2 />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}